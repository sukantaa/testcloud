<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Customising path patterns for your Apiman Gateway</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3AENywN72xA/custom-url-parser.html" /><category term="feed_group_name_apiman" scheme="searchisko:content:tags" /><category term="feed_name_apiman" scheme="searchisko:content:tags" /><author><name>Marc Savy</name></author><id>searchisko:content:id:jbossorg_blog-customising_path_patterns_for_your_apiman_gateway</id><updated>2018-07-03T20:00:00Z</updated><published>2018-07-03T20:00:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;One common request we here is how to create custom URL patterns for the Apiman Gateway.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For example, this means allowing changing the (Public API) default:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;http://gatewayhost:port/{organizationId}/{apiId}/{version}/&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To a custom alternative. As a simple example we&amp;#8217;re going to hard-code an organisation in. We&amp;#8217;ll assume that we&amp;#8217;ve established a convention to always publish our APIs to a particular org. That will change the pattern to:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;http://gatewayhost:port/{apiId}/{version}/&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; If you&amp;#8217;re using the Vert.x Gateway you should use Apiman 1.4.3.Final or later as a bug prevented plugins from loading from static config. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="create-a-plugin-skeleton"&gt;Create a plugin skeleton&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="admonitionblock tip"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-tip" title="Tip"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; Check &lt;a href="http://www.apiman.io/latest/developer-guide.html#_creating_a_plugin"&gt;out our documentation for creating Apiman Plugins&lt;/a&gt; for more in-depth information. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One of Apiman&amp;#8217;s handiest features is its plugin subsystem. This allows you to fully modularise custom code and distribute it through familiar channels like Maven repositories. It&amp;#8217;s much more convenient than trying to play around with customising the class-path and messing around to make sure files are in the right place.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;First, check out this plugin skeleton:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;$ git clone http://github.com/apiman/apiman-plugins.git $ cd custom-path-parser-demo/&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Have a look at &lt;code&gt;CustomPathParserImpl.java&lt;/code&gt;. It implements &lt;code&gt;IApiRequestPathParser&lt;/code&gt; and takes the incoming path and headers; it returns an &lt;code&gt;ApiRequestPathInfo&lt;/code&gt; that instructs Apiman what the &lt;code&gt;orgId&lt;/code&gt;, &lt;code&gt;apiId&lt;/code&gt;, &lt;code&gt;apiVersion&lt;/code&gt;, and &lt;code&gt;resource&lt;/code&gt; are, allowing Apiman to map the incoming request correctly.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span class="directive"&gt;public&lt;/span&gt; &lt;span class="type"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CustomPathParserImpl&lt;/span&gt; &lt;span class="directive"&gt;implements&lt;/span&gt; IApiRequestPathParser { &lt;span class="annotation"&gt;@Override&lt;/span&gt; &lt;span class="directive"&gt;public&lt;/span&gt; ApiRequestPathInfo parseEndpoint(&lt;span class="predefined-type"&gt;String&lt;/span&gt; path, HeaderMap headers) { &lt;span class="comment"&gt;// Your custom path logic&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For reference the default implementation is &lt;a href="https://github.com/apiman/apiman/blob/master/gateway/engine/core/src/main/java/io/apiman/gateway/engine/impl/DefaultRequestPathParser.java"&gt;io.apiman.gateway.engine.impl.DefaultRequestPathParser&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="creating-our-custom-version"&gt;Creating our custom version&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In our demonstration &lt;code&gt;CustomPathParserImpl&lt;/code&gt; we will use a very simple parser that doesn&amp;#8217;t inspect any headers. I recommend you check the default implementation to find &lt;a href="https://github.com/apiman/apiman/blob/master/common/util/src/main/java/io/apiman/common/util/ApimanPathUtils.java"&gt;utilities&lt;/a&gt; that handles alternative ways of capturing versioning info, such as accept headers, version headers, etc.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;First we&amp;#8217;ll add a constructor with a string map. This will allow us to pass in configuration information from our static config file (&lt;code&gt;apiman.properties&lt;/code&gt; or &lt;code&gt;conf.json&lt;/code&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span class="directive"&gt;final&lt;/span&gt; &lt;span class="predefined-type"&gt;String&lt;/span&gt; defaultOrgName; &lt;span class="directive"&gt;public&lt;/span&gt; CustomPathParserImpl(&lt;span class="predefined-type"&gt;Map&lt;/span&gt;&amp;lt;&lt;span class="predefined-type"&gt;String&lt;/span&gt;, &lt;span class="predefined-type"&gt;String&lt;/span&gt;&amp;gt; config) { &lt;span class="comment"&gt;// Pass in the defaultOrgName from static config or just use &amp;quot;DefaultOrg&amp;quot;.&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.defaultOrgName = config.getOrDefault(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;defaultOrgName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;DefaultOrg&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); } &lt;span class="directive"&gt;public&lt;/span&gt; ApiRequestPathInfo parseEndpoint(&lt;span class="predefined-type"&gt;String&lt;/span&gt; path, HeaderMap headers) { &lt;span class="predefined-type"&gt;String&lt;/span&gt;&lt;span class="type"&gt;[]&lt;/span&gt; split = StringUtils.split(path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;3&lt;/span&gt;); &lt;span class="keyword"&gt;if&lt;/span&gt; (split == &lt;span class="predefined-constant"&gt;null&lt;/span&gt; || split.length &amp;lt; &lt;span class="integer"&gt;2&lt;/span&gt;) { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="exception"&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Invalid path format, expected /apiId/apiVersion/&amp;lt;resource path&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); } ApiRequestPathInfo parsed = &lt;span class="keyword"&gt;new&lt;/span&gt; ApiRequestPathInfo(); &lt;span class="comment"&gt;// Let's set the org name manually as our configured `defaultOrgName`&lt;/span&gt; parsed.orgId = defaultOrgName; parsed.apiId = split[&lt;span class="integer"&gt;0&lt;/span&gt;]; parsed.apiVersion = split[&lt;span class="integer"&gt;1&lt;/span&gt;]; &lt;span class="keyword"&gt;if&lt;/span&gt; (split.length &amp;gt; &lt;span class="integer"&gt;2&lt;/span&gt;) { parsed.resource = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + split[&lt;span class="integer"&gt;2&lt;/span&gt;]; } &lt;span class="keyword"&gt;else&lt;/span&gt; { parsed.resource = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;; } &lt;span class="keyword"&gt;return&lt;/span&gt; parsed; }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So now, if we have a path like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;code&gt;/FooApi/1.0/some/resource&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This will become:&lt;/p&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;orgId&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;DefaultOrg&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;apiId&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;FooApi&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;apiVersion&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;1.0&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;resource&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;/some/resource&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Which would be the equivalent of the default style of:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;code&gt;/DefaultOrg/FooApi/1.0/some/resource&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="wiring-it-up"&gt;Wiring it up&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; Change the versions as applicable. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Run &lt;code&gt;mvn clean install&lt;/code&gt; at the demo project&amp;#8217;s root. Then open your Apiman configuration file (either apiman.properties or conf.json).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the Vert.x Gateway:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="json"&gt;&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;request-parser&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;plugin:io.apiman.plugins:custom-path-parser-plugin-demo:1.4.3.Final:war/io.apiman.plugins.demo.custompathparser.CustomPathParserImpl&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;config&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;defaultOrgName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Apiman&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt; &lt;span class="error"&gt;W&lt;/span&gt;&lt;span class="error"&gt;h&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;v&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt; &lt;span class="error"&gt;y&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt; &lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;k&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the Servlet Gateway:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="properties"&gt;apiman-gateway.request-parser=plugin:io.apiman.plugins:custom-path-parser-plugin-demo:1.4.3.Final:war/io.apiman.plugins.demo.custompathparser.CustomPathParserImpl apiman-gateway.request-parser.defaultOrgName=Apiman // Whatever you like&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;$ curl 'http://localhost:8082/TheApi/2' { "method" : "GET", "resource" : "/services/echo/foobar/", "uri" : "/services/echo/foobar/", "headers" : { "Accept" : "*/*", "Host" : "localhost:8080", "transfer-encoding" : "chunked", "User-Agent" : "curl/7.54.0" }, "bodyLength" : null, "bodySha1" : null, "counter" : 2 }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; Double check that your plugin is structured correctly and you have all of the names right in your plugin URL. Otherwise you will get errors complaining that your classes are not found. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We created a simple plugin to provide custom URL mappings to the Apiman Gateway and configured our gateways to use our code.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A future improvement extending IApiRequestPathParser will allow for the Apiman Gateway to report URLs back to the Apiman Manager (or whomever publishes) in a more granular fashion (rather than just using &lt;code&gt;parseEndpoint&lt;/code&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3AENywN72xA" height="1" width="1" alt=""/&gt;</content><summary>One common request we here is how to create custom URL patterns for the Apiman Gateway. For example, this means allowing changing the (Public API) default: http://gatewayhost:port/{organizationId}/{apiId}/{version}/ To a custom alternative. As a simple example we’re going to hard-code an organisation in. We’ll assume that we’ve established a convention to always publish our APIs to a particular or...</summary><dc:creator>Marc Savy</dc:creator><dc:date>2018-07-03T20:00:00Z</dc:date><feedburner:origLink>http://apiman.io/blog/apiman/gateway/manager/plugin/extensibility/2018/07/03/custom-url-parser.html</feedburner:origLink></entry><entry><title>Version 1.4.3 of Apiman is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5vxh_AO58OY/release-1.4.3.html" /><category term="feed_group_name_apiman" scheme="searchisko:content:tags" /><category term="feed_name_apiman" scheme="searchisko:content:tags" /><author><name>Marc Savy</name></author><id>searchisko:content:id:jbossorg_blog-version_1_4_3_of_apiman_is_released</id><updated>2018-07-03T19:20:00Z</updated><published>2018-07-03T19:20:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;Apiman 1.4.3.Final is out. It contains a couple of bug-fixes. Most notably, a bug in the Vert.x Gateway that prevented plugins specified in static config (&lt;code&gt;conf.json&lt;/code&gt;) from being loaded properly.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you experience any issues, please report them to us via &lt;a href="https://issues.jboss.org/browse/APIMAN/"&gt;JIRA&lt;/a&gt;, &lt;a href="https://github.com/apiman/apiman"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://lists.jboss.org/mailman/listinfo/apiman-user"&gt;the mailing list&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="download-1-4-3-final"&gt;Download 1.4.3.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-vertx-1.4.3.Final.zip"&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-wildfly10-1.4.3.Final-overlay.zip"&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-wildfly11-1.4.3.Final-overlay.zip"&gt;WildFly 11&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-eap7-1.4.3.Final-overlay.zip"&gt;EAP 7&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-tomcat8-1.4.3.Final-overlay.zip"&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12338183"&gt;1.4.3.Final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;div class="title"&gt;Bugs&lt;/div&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://issues.jboss.org/browse/APIMAN-1338"&gt;APIMAN-1338&lt;/a&gt; - Non-policy plugins not being loaded properly from Vert.x static config&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://issues.jboss.org/browse/APIMAN-1340"&gt;APIMAN-1340&lt;/a&gt; - NPE when starting&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5vxh_AO58OY" height="1" width="1" alt=""/&gt;</content><summary>Apiman 1.4.3.Final is out. It contains a couple of bug-fixes. Most notably, a bug in the Vert.x Gateway that prevented plugins specified in static config (conf.json) from being loaded properly. If you experience any issues, please report them to us via JIRA, GitHub, or the mailing list. Download 1.4.3.Final Vert.x (Gateway Only) WildFly 10 or EAP 7.1 WildFly 11 EAP 7 Tomcat 8+ Release Notes 1.4.3....</summary><dc:creator>Marc Savy</dc:creator><dc:date>2018-07-03T19:20:00Z</dc:date><feedburner:origLink>http://apiman.io/blog/apiman/release/2018/07/03/release-1.4.3.html</feedburner:origLink></entry><entry><title>Blogging has moved</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tunUUnmSJLk/blogging-has-moved.html" /><category term="feed_group_name_teiid" scheme="searchisko:content:tags" /><category term="feed_name_teiid" scheme="searchisko:content:tags" /><author><name>Steven Hawkins</name></author><id>searchisko:content:id:jbossorg_blog-blogging_has_moved</id><updated>2018-07-03T19:15:14Z</updated><published>2018-07-03T18:57:00Z</published><content type="html">Now that we have worked the kinks out of our new &lt;a href="http://teiid.io/"&gt;teiid.io&lt;/a&gt; site, we've added a simple blogging feature there &lt;a href="http://teiid.io/blog"&gt;teiid.io/blog&lt;/a&gt;. For the time being however that means that some features will not there - such as an RSS feed or comments. As we get more familiar with Hugo, we'll add necessary features.&lt;br /&gt;&lt;br /&gt;Thank you,&lt;br /&gt;Steve&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tunUUnmSJLk" height="1" width="1" alt=""/&gt;</content><summary>Now that we have worked the kinks out of our new teiid.io site, we've added a simple blogging feature there teiid.io/blog. For the time being however that means that some features will not there - such as an RSS feed or comments. As we get more familiar with Hugo, we'll add necessary features. Thank you, Steve</summary><dc:creator>Steven Hawkins</dc:creator><dc:date>2018-07-03T18:57:00Z</dc:date><feedburner:origLink>http://teiid.blogspot.com/2018/07/blogging-has-moved.html</feedburner:origLink></entry><entry><title>Next DevNation Live: Feature toggles and hypothesis-driven development, July 5th, 12pm EDT</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9SYUHwJ1K3k/" /><category term="DevNation" /><category term="Events" /><category term="Modern App Dev" /><category term="DevNation Live" /><category term="feature toggles" /><category term="Hypothesis-driven development" /><category term="software development" /><author><name>Burr Sutter</name></author><id>https://developers.redhat.com/blog/?p=504677</id><updated>2018-07-03T15:20:04Z</updated><published>2018-07-03T15:20:04Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Can you “foresee the feature?” Do you know if proposed changes to your application will have the desired impact to your business? Let’s drop the crystal ball approach and start practicing some hypothesis-driven development so you can test your assumptions. Not every new feature is guaranteed to be a success. Some might just waste time and increase your technical debt. Join us for the next online DevNation Live on July 5th at 12pm EDT for &lt;/span&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;Feature Toggles and Hypothesis-driven Development&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, presented by &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat director of Developer Experience&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;, &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Edson Yanaga&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In this session, we’ll demonstrate how feature toggles can be incorporated into your software development process to let you quickly assess the business results of changes. By toggling functionality on and off, you can measure the impact and make better decisions based on real data.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us to gain an understanding of how the use of hypotheses, not requirements, can help you deliver what your business actually requires while learning quickly what works and what does not.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;b&gt;Register now&lt;/b&gt;&lt;/a&gt;&lt;b&gt; and join the live presentation at 12pm EDT, Thursday, July 5th. &lt;/b&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Session Agenda&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span id="more-504677"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In this session you’ll discover:&lt;/span&gt;&lt;/p&gt; &lt;ol&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;What is hypothesis-driven development and how it can drive better data-based decisions.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;How feature toggles can be bundled into your software development process to quickly allow functionality to be turned on and off to measure the difference  in results.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Why combining feature toggles with hypothesis-driven development will give you the tools to quickly analyze whether a proposed change will achieve your business objectives.&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;&lt;b&gt;About the speakers&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;b&gt;&lt;i&gt;Edson Yanaga, Director, Customer Experience, Red Hat&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;br /&gt; &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Edson Yanaga (&lt;a href="https://twitter.com/yanaga."&gt;@yanaga&lt;/a&gt;) is a Red Hat director of Developer Experience, a Java Champion, and a Microsoft MVP. Edson is a published author and a frequent speaker at international conferences, discussing Java&lt;img src="https://s.w.org/images/core/emoji/2.4/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;, microservices, cloud computing, DevOps, and software craftsmanship. He considers himself a software craftsman and is convinced that all of us can create a better world for people with better software. He is passionate about helping developers worldwide deliver better software more quickly and safely.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;DevNation Live Tech Talks&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Check our &lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;developer events&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; page to find out what is happening next, such as upcoming &lt;/span&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;span style="font-weight: 400;"&gt;DevNation Live Tech Talks&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. You can view over a dozen recorded videos for previous sessions:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;June 21: Advanced Microservices Tracing with Jaeger&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;June 7: Your Journey to a Serverless World—An Introduction to Serverless&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;May 16: Serverless and Servicefull Applications – Where Microservices complements Serverless&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;May 2: Jakarta EE: The Future of Java EE&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;b&gt;Don’t forget to &lt;/b&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;b&gt;register now&lt;/b&gt;&lt;/a&gt;&lt;b&gt; and join the live presentation at 12pm EDT, Thursday, July 5th.&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;linkname=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F03%2Fnext-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt%2F&amp;#38;title=Next%20DevNation%20Live%3A%20Feature%20toggles%20and%20hypothesis-driven%20development%2C%20July%205th%2C%2012pm%20EDT" data-a2a-url="https://developers.redhat.com/blog/2018/07/03/next-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt/" data-a2a-title="Next DevNation Live: Feature toggles and hypothesis-driven development, July 5th, 12pm EDT"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/03/next-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt/"&gt;Next DevNation Live: Feature toggles and hypothesis-driven development, July 5th, 12pm EDT&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9SYUHwJ1K3k" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Can you “foresee the feature?” Do you know if proposed changes to your application will have the desired impact to your business? Let’s drop the crystal ball approach and start practicing some hypothesis-driven development so you can test your assumptions. Not every new feature is guaranteed to be a success. Some might just waste time [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/03/next-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt/"&gt;Next DevNation Live: Feature toggles and hypothesis-driven development, July 5th, 12pm EDT&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/03/next-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">504677</post-id><dc:creator>Burr Sutter</dc:creator><dc:date>2018-07-03T15:20:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/03/next-devnation-live-feature-toggles-and-hypothesis-driven-development-july-5th-12pm-edt/</feedburner:origLink></entry><entry><title>Byteman 4.0.3 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zbnBLYWmMkQ/byteman-403-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_3_has_been_released</id><updated>2018-07-03T08:02:00Z</updated><published>2018-07-03T08:02:00Z</published><content type="html">&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;Byteman 4.0.3 is now available from the &lt;a class="moz-txt-link-freetext" href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a class="moz-txt-link-freetext" href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;/div&gt;&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="post-body entry-content" id="post-body-3028514058787793602" itemprop="description articleBody"&gt;Byteman 4.0.3 updates the 4.0.2 release with a small number of bug fixes and performance improvements. More details can be found in the &lt;a href="http://downloads.jboss.org/byteman/4.0.3/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zbnBLYWmMkQ" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.3 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.3 updates the 4.0.2 release with a small number of bug fixes and performance improvements. More details can be found in the Release Notes.</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2018-07-03T08:02:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2018/07/byteman-403-has-been-released.html</feedburner:origLink></entry><entry><title>A giant leap forward with multithreaded incremental solving</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eOX1R_z6yKQ/AGiantLeapForwardWithMultithreadedIncrementalSolving.html" /><category term="algorithm" scheme="searchisko:content:tags" /><category term="benchmark" scheme="searchisko:content:tags" /><category term="feed_group_name_optaplanner" scheme="searchisko:content:tags" /><category term="feed_name_optaplanner" scheme="searchisko:content:tags" /><author><name>ge0ffrey</name></author><id>searchisko:content:id:jbossorg_blog-a_giant_leap_forward_with_multithreaded_incremental_solving</id><updated>2018-07-03T13:58:04Z</updated><published>2018-07-03T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;OptaPlanner finally supports &lt;em&gt;multithreaded incremental solving&lt;/em&gt;. &lt;strong&gt;The speedup is spectacular. Even with just a few CPU cores, it triples the score calculation speed.&lt;/strong&gt; See the results below. To activate it, a single extra line in the configuration suffices.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://issues.jboss.org/browse/PLANNER-76"&gt;The original feature request&lt;/a&gt; stems from 2007. Throughout the years, step by step, we diligently prepared the internal architecture for it. So now, after 10 years, we fully support it from &lt;code&gt;7.9.0.Final&lt;/code&gt; onwards.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;But why did it take so long to implement?&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_requirements"&gt;Requirements&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s take a look at the requirements for multithreaded incremental solving:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Horizontally scale an algorithm across CPUs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Don’t ruin the speedup of incremental score calculation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Runs must be reproducible.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_horizontally_scale_an_algorithm_across_cpus"&gt;Horizontally scale an algorithm across CPUs&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There are several ways to use multiple threads without doing real multithreaded solving:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multitenancy&lt;/strong&gt;: Solve multiple datasets, one per thread.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Works since the first OptaPlanner version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Doesn’t do horizontal scaling on 1 dataset.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi bet solving&lt;/strong&gt;: Solve one dataset in multiple ways, completely independent of each other. Take the best result.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Works since the first OptaPlanner version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It’s usually a waste of resources: use the Benchmarker during development instead to find the best algorithm in advance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Doesn’t scale horizontally: the best result is marginally better than a single-threaded result and takes equally long.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Partitioned Search&lt;/strong&gt;: Split up one dataset and solve each one separately.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Fully supported since OptaPlanner 7.0.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scales horizontally at an expensive trade-off of solution quality, because &lt;a href="https://www.optaplanner.org/blog/2014/03/03/CanMapReduceSolvePlanningProblems.html"&gt;partitioning excludes optimal solutions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;But none of these are real parallel heuristics, as shown in the bottom right corner below:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multiThreadingStrategies.png" alt="multiThreadingStrategies"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In real multithreaded solving, we solve 1 dataset, without partitioning, by offloading heavy calculations of 1 algorithm (which could be a composition of multiple algorithms) to multiple threads on separate CPU cores.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In OptaPlanner’s Construction Heuristics and Local Search, the most CPU-expensive work is calculating the score of a move. For example in Tabu Search, each step (the outer iteration) evaluates around a 1000 moves. That’s measured as the &lt;em&gt;score calculation speed&lt;/em&gt;. It usually varies between 1k evaluated moves per second and 500k evaluated moves per second.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;em&gt;Multithreaded solving is just a matter of distributing the move evaluations of a step across multiple threads.&lt;/em&gt; That’s straightforward. There are even a few users that did this (most notably a space agency supplier), by hacking our code. But they didn’t see a performance gain. Quite the opposite actually (except with an easy score calculator). Those changes broke incremental score calculation. &lt;strong&gt;Multithreaded solving is easy. But multithreaded &lt;em&gt;incremental&lt;/em&gt; solving is hard.&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_don_t_ruin_the_speedup_of_incremental_score_calculation"&gt;Don’t ruin the speedup of incremental score calculation&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Ah, this brings us to incremental score calculation. The key to performance. It is the rocket science at the heart of OptaPlanner that brings massive scalability. And — for the few that have seen them — the cause of the notorious score corruption exception.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;What is incremental score calculation? For each move, we calculate the score of the solution state after applying that move. With non-incremental score calculation, the entire score is calculated from scratch. But with incremental score calculation, we only calculate the delta, as shown below. That’s far more efficient.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="incrementalScoreCalculationEmployeeRostering.png" alt="incrementalScoreCalculationEmployeeRostering"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To put this in perspective: an incremental score calculator on a vehicle routing problem with 1000 locations, is theoretically around 500 times faster than a non-incremental score calculator. &lt;strong&gt;To offset the loss of an incremental solver on a dataset of a 1000 planning entities, a multithreaded non-incremental solver would need around 500 CPU cores (in theory).&lt;/strong&gt; In practice, the numbers vary, but the gain of incremental solving always outweighs the gain of multithreaded solving.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Of course, now, we can have our cake and eat it too.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Each incremental score calculator is inherently single threaded, so each move thread has its own score calculator and its own solution state. Cloning either is too expensive. To evaluate a move on a move thread, with incremental score calculation, we must reuse the score calculator of the previous evaluation. This implies that the working solution must be in the exact same state to begin with. But because the outer step iterations change the solution state constantly, the move threads must sync up with the main solver thread after every step.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It’s similar to any real-time multiplayer game (such as StarCraft), in which multiple hosts need to sync up to show the same game state, but can’t afford to transmit the entire game state for every change.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As soon as one thread goes out of sync, all calculations of that thread are corrupted, and the entire system is affected. But through a well designed orchestration of concurrent components (and multi-day test runs), we prevent race conditions. And it works. Like a charm.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Furthermore, the threads must be able to send moves to each other, even if it’s only to share the winning move. This too, posed a challenge. &lt;em&gt;OptaPlanner is an Object Oriented constraint solver&lt;/em&gt;, so its decision variables can be any valid Java type (not just booleans, numbers and floats), such as &lt;code&gt;Employee&lt;/code&gt; or &lt;code&gt;Foo&lt;/code&gt;. Those variables can sit in any domain class (called planning entities), such as &lt;code&gt;Shift&lt;/code&gt; or &lt;code&gt;Bar&lt;/code&gt;. The move instances reference those class instances. When a solution gets cloned to initiate a move thread, those planning entities, such as &lt;code&gt;Shift&lt;/code&gt; get cloned too. So when a move from thread A gets sent to thread B, OptaPlanner rebases the move on the solution state of thread B. This replaces the references from the move instance to thread A’s solution state with the equivalent references of thread B’s solution state. Pretty nifty.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_runs_must_be_reproducible"&gt;Runs must be reproducible&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Reproducibility is king. The ability to run the same dataset through OptaPlanner twice and get the exact same result after the same number of steps (and at every step), is worth its weight in gold. To lose that, would make debugging, issue tracking and production audits extremely difficult.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The inherent unpredictable nature of thread execution order on multi-core machines, makes reproducibility an interesting requirement. Combine that with the reliance of many optimization algorithms on a seeded random number generator (which is not thread-safe), for a real challenge.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;But we did it. We have 100% reproducibility. This involves several ingenious mechanisms, such as using a master seeded random to generate a seeded random per thread, generating a predictable number of selected, buffered moves (because move generation often relies on the random generator too) and reordering evaluated moves in their originally selected order when they come back from the move threads.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_the_configuration"&gt;The configuration&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Multithreaded incremental solving is easy to activate. Just add a &lt;code&gt;&amp;lt;moveThreadCount&amp;gt;&lt;/code&gt; line in your solver config:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight nowrap"&gt;&lt;code class="language-java" data-lang="java"&gt;&amp;lt;solver&amp;gt; &amp;lt;moveThreadCount&amp;gt;4&amp;lt;/moveThreadCount&amp;gt; ... &amp;lt;/solver&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This basically donates 4 extra CPU cores to the solver. Use &lt;code&gt;AUTO&lt;/code&gt; to have OptaPlanner deduce it automatically. Optionally, specify a &lt;code&gt;&amp;lt;threadFactoryClass&amp;gt;&lt;/code&gt; for environments that don’t like arbitrary thread creation.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It combines with every other feature, including other multithreading strategies (such as multitenancy, Partitioned Search, …​), if you have enough CPU cores to pull it off.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_the_benchmarks"&gt;The benchmarks&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="_methodology"&gt;Methodology&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Using optaplanner-benchmark, I ran a set of macro benchmarks:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;On a 64-bit &lt;strong&gt;8-core&lt;/strong&gt; Intel i7-4790 desktop with 32GB physical RAM.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using OpenJDK 1.8.0_171 on Linux.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With the JVM max heap (&lt;code&gt;-Xmx&lt;/code&gt;) set to 4GB.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;I also tried 2GB and those results were worse, especially for a higher number of move threads.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;So when increasing the number of move threads, it’s important to increase the max memory too.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With logging set to &lt;code&gt;info&lt;/code&gt; logging.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;I also tried &lt;code&gt;debug&lt;/code&gt; logging and those results were clearly worse (because the faster it runs, the more debug logging it does).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It’s recommended to &lt;a href="https://www.optaplanner.org/blog/2015/02/23/HowFastIsLogging.html"&gt;avoid debug logging in production&lt;/a&gt; anyway.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With score DRL.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;I also tried with the incremental Java calculator and those results had more moves per second, but a lower relative gain per move thread (due to higher congestion).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;5 minutes per dataset.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_results_on_the_vehicle_routing_problem_vrp"&gt;Results on the vehicle routing problem (VRP)&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Below are the results on different VRP datasets for a First Fit Decreasing (the Construction Heuristic) followed by Tabu Search (the Local Search). Higher is better.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multithreadedSolvingVrpTabuSearch.png" alt="multithreadedSolvingVrpTabuSearch"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The blue bar is the traditional, single-threaded OptaPlanner. It has an average score calculation speed of &lt;code&gt;26,947&lt;/code&gt; moves per second. That goes up to &lt;code&gt;45,565&lt;/code&gt; with 2 move threads, to &lt;code&gt;80,757&lt;/code&gt; with 4 move threads and to &lt;code&gt;88,410&lt;/code&gt; with 6 move threads.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;So by donating more CPU cores to OptaPlanner, it uses a fraction of the time to reach the same result.&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;On other Local Search algorithms, such as Late Acceptance, we see similar results:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multithreadedSolvingVrpLateAcceptance.png" alt="multithreadedSolvingVrpLateAcceptance"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Late Acceptance is a fast stepping algorithm (especially in the beginning), which implies that it has less moves per step. Yet, it has a similar relative speed gain for the Vehicle Routing Problem.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We also see a slight reduction of the relative speed gain on the biggest dataset with 2750 VRP locations, but I suspect this might be because the 4GB max heap memory is too low for it to function at full efficiency. I’ll investigate this further.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_results_on_nurse_rostering"&gt;Results on nurse rostering&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I also ran benchmarks on the nurse rostering use case, but with a JVM max heap (&lt;code&gt;-Xmx&lt;/code&gt;) set to 2GB. Here I tried Tabu Search, Simulated Annealing and Late Acceptance:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multithreadedSolvingNurseRosteringTabuSearch.png" alt="multithreadedSolvingNurseRosteringTabuSearch"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multithreadedSolvingNurseRosteringSimulatedAnnealing.png" alt="multithreadedSolvingNurseRosteringSimulatedAnnealing"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="multithreadedSolvingNurseRosteringLateAcceptance.png" alt="multithreadedSolvingNurseRosteringLateAcceptance"&gt; &lt;/img&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In all 3 case, we see a welcome speed gain, but Tabu Search (a slow stepping algorithms) has a bigger relative gain than the others (which are fast stepping algorithms).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In any case, it’s clear that &lt;em&gt;your mileage may vary&lt;/em&gt;, depending on the use case and other factors.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_future_improvements"&gt;Future improvements&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As we increase the number of move threads or decrease the time to evaluate a single move on one thread, we see a higher congestion on the inter-thread communication queues, leading to a lower relative scalability gain. There are several ways to deal with that and we’ll be investigating such internal improvements in the future.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_conclusion"&gt;Conclusion&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;em&gt;All your CPU are belong to OptaPlanner.&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/All_your_base_are_belong_to_us"&gt;[1]&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With a single extra configuration line, &lt;a href="https://www.optaplanner.org/"&gt;OptaPlanner&lt;/a&gt; can reach the same high-quality solution in a fraction of the time. If you have CPU cores to spare, of course.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eOX1R_z6yKQ" height="1" width="1" alt=""/&gt;</content><summary>OptaPlanner finally supports multithreaded incremental solving. The speedup is spectacular. Even with just a few CPU cores, it triples the score calculation speed. See the results below. To activate it, a single extra line in the configuration suffices. The original feature request stems from 2007. Throughout the years, step by step, we diligently prepared the internal architecture for it. So now,...</summary><dc:creator>ge0ffrey</dc:creator><dc:date>2018-07-03T00:00:00Z</dc:date><feedburner:origLink>https://www.optaplanner.org/blog/2018/07/03/AGiantLeapForwardWithMultithreadedIncrementalSolving.html</feedburner:origLink></entry><entry><title>June 2018 ISO C++ Meeting Trip Report (Core Language)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZE9JEpKfMjs/" /><category term="C++" /><category term="Community" /><category term="Programming Languages" /><category term="Red Hat Developer Toolset" /><category term="C standardization" /><category term="c++" /><category term="gcc" /><category term="GCC compiler collection" /><category term="GNU Compiler Collection" /><category term="iso" /><category term="standards" /><author><name>Jason Merrill</name></author><id>https://developers.redhat.com/blog/?p=504517</id><updated>2018-07-02T20:46:21Z</updated><published>2018-07-02T20:46:21Z</published><content type="html">&lt;p&gt;The Summer 2018 ISO C++ standards committee meeting this year was back in Rapperswil, Switzerland. The new features for C++2a are coming fast now; the Core language working group had very little time for issue processing because of all the proposal papers coming to us from the Evolution working group.&lt;/p&gt; &lt;p&gt;Red Hat sent three of us to the meeting, to cover different tracks: myself (Core), Jonathan Wakely (Library), and Torvald Riegel (Parallelism/Concurrency).  Overall, I thought the meeting was very successful; we made significant progress in a lot of areas.&lt;/p&gt; &lt;p&gt;New C++ language features that were accepted at this meeting:&lt;span id="more-504517"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Accepted features&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="http://wg21.link/p0542"&gt;Contracts&lt;/a&gt;—&lt;/strong&gt;This feature provides a structured way to express function preconditions and postconditions in code, e.g.&lt;/p&gt; &lt;pre&gt;int f(int x)   [[expects: x&amp;#62;0]]   [[ensures r: r&amp;#62;0]];&lt;/pre&gt; &lt;p&gt;&lt;a href="http://wg21.link/p0732"&gt;&lt;strong&gt;Literal class types for non-type template parameters&lt;/strong&gt;&lt;/a&gt;—These will roughly have the semantics of a reference to a constexpr variable.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="http://wg21.link/p0722"&gt;Destroying operator delete&lt;/a&gt;&lt;/strong&gt;—One use of this feature is for cases when a class is allocated together in a block with other data, such as a trailing buffer.  Where in C++17 deleting a pointer to such a class would call sized &lt;tt&gt;::operator delete&lt;/tt&gt; with the wrong size, with this proposal the user can adjust the size appropriately.&lt;/p&gt; &lt;p&gt;&lt;a href="http://wg21.link/p1064"&gt;&lt;strong&gt;Allowing virtual function calls in constant expression evaluation&lt;/strong&gt;&lt;/a&gt;—This one is somewhat self explanatory.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="http://wg21.link/p0892"&gt;explicit(bool)&lt;/a&gt;&lt;/strong&gt;—Various wrapper types in the C++ standard library currently need to use SFINAE with two separate constructors in order to make construction explicit based on whether construction of the wrapped type(s) is explicit.  With this feature library writers can write a single conditionally-explicit constructor instead.&lt;/p&gt; &lt;p&gt;One semantic change that I wanted to call attention to:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="http://wg21.link/p1008"&gt;Prohibit aggregates with user-declared constructors&lt;/a&gt;&lt;/strong&gt;—Currently, some code uses patterns like:&lt;/p&gt; &lt;pre&gt;struct A {   A() = delete; // prohibit default-initialization   B b; }; A a = { B(); }; // OK, aggregate initialization&lt;/pre&gt; &lt;p&gt;to encourage users of the A type to use aggregate initialization.  But this also allows:&lt;/p&gt; &lt;pre&gt;A a = { }; // also aggregate initialization&lt;/pre&gt; &lt;p&gt;and the deleted default constructor might also have been intended to prevent this, since it&amp;#8217;s also initializing from no elements.  So this proposal changes A, or any class with a user-declared constructor, to be non-aggregate; if the A author wants aggregate initialization, they must remove the default constructor declaration.  I argued that there should be an exception for copy and move constructors, but lost.  But it is still possible to prevent default initialization of an aggregate by using a trailing empty member with the recently added &lt;tt&gt;[[no_unique_address]]&lt;/tt&gt; attribute:&lt;/p&gt; &lt;pre&gt;struct B { B(); }; struct deleted_default { deleted_default() = delete; }; struct A {   B b;   [[no_unique_address]] deleted_default _d; // prevent default-initialization }; A a;           // error, deleted implicitly-declared default constructor A a2 { };      // ok, aggregate initialization A a3 { B() };  // ok, aggregate initialization&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Papers that weren&amp;#8217;t accepted&lt;/h2&gt; &lt;p&gt;There were several more papers that we worked on, but weren&amp;#8217;t ready by the end of the week, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://wg21.link/p0482"&gt;char8_t type for UTF-8 characters&lt;/a&gt;, to go along with the existing char16_t and char32_t types. char8_t will not have the problematic aliasing properties of plain char.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p0960"&gt;parenthesized initialization of aggregate classes&lt;/a&gt;, to be treated in overload resolution like a built-in constructor taking the types of the aggregate elements.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Concepts, Modules, and Coroutines&lt;/h2&gt; &lt;p&gt;The big three feature TSes (technical specifications) are still working toward consensus.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Concepts&lt;/strong&gt; (partially merged last year)—There was a lot of discussion about terse function declaration syntax, exploring alternatives to the syntax in the TS, and I think things are looking hopeful for a successful compromise at the next meeting.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Modules—&lt;/strong&gt;Modules also seem to be on track for successful compromise; there was consensus for merging some of the ATOM proposal into the TS working paper, and we&amp;#8217;ll see the result at the next meeting.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Coroutines—&lt;/strong&gt;Merging the coroutines TS was up for a vote at the end of the meeting, but failed.  There was an alternative proposal considered at the meeting, but the next step isn&amp;#8217;t as clear to me here as it is with Concepts and Modules.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We also voted to send out the (static) Reflection TS for public comment at this meeting.  This proposal uses meta-types as the handle through which the user can ask questions about the program, in much the same way that type traits use class templates.&lt;/p&gt; &lt;p&gt;One broadly interesting bit from discussion of core issues at the end of the week:&lt;/p&gt; &lt;p&gt;&lt;a href="http://wg21.link/cwg2335"&gt;&lt;strong&gt;2335&lt;/strong&gt;&lt;/a&gt;—There seems to be a growing consensus in the core working group (CWG) that we should be more flexible about dependencies between delayed-parse regions, allowing on-demand parsing in much the way we do on-demand instantiation of such regions in a class template.  This has previously been deemed impractical, but there is less concern about that now.&lt;/p&gt; &lt;p&gt;The next meeting will be in San Diego in November.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;linkname=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F02%2Fiso-cpp-summer-2018-core-language%2F&amp;#38;title=June%202018%20ISO%20C%2B%2B%20Meeting%20Trip%20Report%20%28Core%20Language%29" data-a2a-url="https://developers.redhat.com/blog/2018/07/02/iso-cpp-summer-2018-core-language/" data-a2a-title="June 2018 ISO C++ Meeting Trip Report (Core Language)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/02/iso-cpp-summer-2018-core-language/"&gt;June 2018 ISO C++ Meeting Trip Report (Core Language)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZE9JEpKfMjs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Summer 2018 ISO C++ standards committee meeting this year was back in Rapperswil, Switzerland. The new features for C++2a are coming fast now; the Core language working group had very little time for issue processing because of all the proposal papers coming to us from the Evolution working group. Red Hat sent three of [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/02/iso-cpp-summer-2018-core-language/"&gt;June 2018 ISO C++ Meeting Trip Report (Core Language)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/02/iso-cpp-summer-2018-core-language/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">504517</post-id><dc:creator>Jason Merrill</dc:creator><dc:date>2018-07-02T20:46:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/02/iso-cpp-summer-2018-core-language/</feedburner:origLink></entry><entry><title>RESTEasy 3.6.0.Final and 4.0.0.Beta4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Hbol_JezbYc/resteasy-360final-and-400beta4" /><category term="feed_group_name_resteasy" scheme="searchisko:content:tags" /><category term="feed_name_resteasy" scheme="searchisko:content:tags" /><category term="JAX-RS" scheme="searchisko:content:tags" /><category term="jaxrs" scheme="searchisko:content:tags" /><category term="reactive" scheme="searchisko:content:tags" /><category term="resteasy" scheme="searchisko:content:tags" /><category term="rxjava" scheme="searchisko:content:tags" /><author><name>Alessio Soldano</name></author><id>searchisko:content:id:jbossorg_blog-resteasy_3_6_0_final_and_4_0_0_beta4</id><updated>2018-07-02T12:56:08Z</updated><published>2018-07-02T12:56:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:8601afd5-5da4-4e10-b0d7-6bfd56eb8993] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;You might have recently read about the very interesting new features being developed these days in &lt;strong&gt;RESTEasy&lt;/strong&gt;... great, the time has come to &lt;em&gt;deliver them in a couple of releases!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Last week, &lt;strong&gt;RESTEasy 3.6.0.Final&lt;/strong&gt; and &lt;strong&gt;4.0.0.Beta4&lt;/strong&gt; have been tagged, built and published; here is a list of the most relevant additions coming with them:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;client and server side reactive extensions&lt;/em&gt; [1][2]&lt;/li&gt;&lt;li&gt;&lt;em&gt;parameter annotations with default names&lt;/em&gt; [3][4]&lt;/li&gt;&lt;li&gt;&lt;em&gt;JettyClientEngine to use jetty-client with JAX-RS Client&lt;/em&gt; [5]&lt;/li&gt;&lt;li&gt;&lt;em&gt;SPI to modify resource metadata&lt;/em&gt; [6]&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Moreover, 4.0.0.Beta4, also feature the first part of the changes for the &lt;em&gt;tracing system&lt;/em&gt; [7] and &lt;em&gt;asynchronous container filters&lt;/em&gt; [8] support.&lt;/p&gt;&lt;p&gt;Both releases are available on the usual Maven repository, feel free to try them out!&lt;/p&gt;&lt;p&gt;3.6.0.Final is also being pulled into WildFly master, targetting inclusion in &lt;strong&gt;WildFly 14&lt;/strong&gt; release.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;[1] &lt;a class="jive-link-blog-small" data-containerId="1100" data-containerType="37" data-objectId="6190" data-objectType="38" href="https://developer.jboss.org/community/resteasy/blog/2018/06/04/asynchronous-reactive-rxjava-and-beyond"&gt;Asynchronous, reactive, rxjava and beyond!&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[2] &lt;a class="jive-link-external-small" href="http://docs.jboss.org/resteasy/docs/3.6.0.Final/userguide/html/Reactive.html" rel="nofollow"&gt;Chapter 39. Reactive programming support&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[3] &lt;a class="jive-link-blog-small" data-containerId="1100" data-containerType="37" data-objectId="6189" data-objectType="38" href="https://developer.jboss.org/community/resteasy/blog/2018/05/29/new-blog"&gt;New DRY-er annotations for parameters&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[4] &lt;a class="jive-link-external-small" href="http://docs.jboss.org/resteasy/docs/3.6.0.Final/userguide/html/_NewParam.html" rel="nofollow"&gt;Chapter 13. Improved @&amp;hellip;Param annotations&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[5] &lt;a class="jive-link-external-small" href="http://docs.jboss.org/resteasy/docs/3.6.0.Final/userguide/html/RESTEasy_Client_Framework.html#jetty_client" rel="nofollow"&gt;Chapter 50. RESTEasy Client API&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[6] &lt;a class="jive-link-external-small" href="http://docs.jboss.org/resteasy/docs/3.6.0.Final/userguide/html/Resources_Metadata.html" rel="nofollow"&gt;Chapter 18. Resources metadata configuration&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[7] &lt;a class="jive-link-blog-small" data-containerId="1100" data-containerType="37" data-objectId="6195" data-objectType="38" href="https://developer.jboss.org/community/resteasy/blog/2018/06/11/a-brief-introduction-to-the-resteasy-tracing-feature"&gt;A brief introduction to the RESTEasy Tracing Feature&lt;/a&gt; &lt;/p&gt;&lt;p&gt;[8] &lt;a class="jive-link-blog-small" data-containerId="1100" data-containerType="37" data-objectId="6198" data-objectType="38" href="https://developer.jboss.org/community/resteasy/blog/2018/06/18/new-asynchronous-container-filters"&gt;New: Asynchronous container filters&lt;/a&gt; &lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:8601afd5-5da4-4e10-b0d7-6bfd56eb8993] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Hbol_JezbYc" height="1" width="1" alt=""/&gt;</content><summary>You might have recently read about the very interesting new features being developed these days in RESTEasy... great, the time has come to deliver them in a couple of releases! Last week, RESTEasy 3.6.0.Final and 4.0.0.Beta4 have been tagged, built and published; here is a list of the most relevant additions coming with them: client and server side reactive extensions [1][2] parameter annotations ...</summary><dc:creator>Alessio Soldano</dc:creator><dc:date>2018-07-02T12:56:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/resteasy/blog/2018/07/02/resteasy-360final-and-400beta4</feedburner:origLink></entry><entry><title>Hotrod clients C++ and C# 8.3.0.Alpha1 are out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cDM6WFfAq-c/hotrod-clients-c-and-c-830alpha1-are-out.html" /><category term="alpha" scheme="searchisko:content:tags" /><category term="C#" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="minor release" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>rigazilla</name></author><id>searchisko:content:id:jbossorg_blog-hotrod_clients_c_and_c_8_3_0_alpha1_are_out</id><updated>2018-07-02T08:51:16Z</updated><published>2018-07-02T08:51:00Z</published><content type="html">Dear Infinispanners,&lt;br /&gt;&lt;br /&gt;The C++ and C# 8.3.0.Alpha1 releases are available!&lt;br /&gt;&lt;br /&gt;Both the clients come with these new features:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;counter operations, to use cluster distributed counters [1]&lt;/li&gt;&lt;li&gt;admin operations, to create/remove cache programmatically at runtime [2] &lt;/li&gt;&lt;/ul&gt;For the .NET Core lovers, there's a work in progress to implement the dotnet core build for the C# client [3].&lt;br /&gt;Features list, code and bits are available as usual: [4] [5] [6].&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;The Infinispan Team&lt;br /&gt;&lt;br /&gt;[1]&lt;a href="http://infinispan.org/docs/stable/user_guide/user_guide.html#clustered_counters"&gt; Clustered Counters&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="http://infinispan.org/docs/stable/user_guide/user_guide.html#hot_rod_admin_tasks"&gt;Hot Rod Admin Tasks&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="https://github.com/infinispan/dotnet-client/blob/master/README.md"&gt;How to build à la .NET Core manière&lt;/a&gt;&lt;br /&gt;[4]&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314125&amp;amp;version=12337514"&gt; Release notes&lt;/a&gt;&lt;br /&gt;[5++] &lt;a href="https://github.com/infinispan/cpp-client/tree/8.3.0.Alpha1"&gt;C++ code for 8.3.0.Alpha1&lt;/a&gt;&lt;br /&gt;[5#] &lt;a href="https://github.com/infinispan/dotnet-client/tree/8.3.0.Alpha1https://github.com/infinispan/dotnet-client/tree/8.3.0.Alpha1"&gt;C# code for 8.3.0.Alpha1&lt;/a&gt;&lt;br /&gt;[6] &lt;a href="http://infinispan.org/hotrod-clients/"&gt;Downloads&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/28xusWgGZWY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cDM6WFfAq-c" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispanners, The C++ and C# 8.3.0.Alpha1 releases are available! Both the clients come with these new features: counter operations, to use cluster distributed counters [1] admin operations, to create/remove cache programmatically at runtime [2] For the .NET Core lovers, there's a work in progress to implement the dotnet core build for the C# client [3]. Features list, code and bits are ava...</summary><dc:creator>rigazilla</dc:creator><dc:date>2018-07-02T08:51:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/28xusWgGZWY/hotrod-clients-c-and-c-830alpha1-are-out.html</feedburner:origLink></entry><entry><title>Why Kubernetes is The New Application Server</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NYgl-DiBQfI/" /><category term="Containers" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Container Platform" /><category term="ci/cd" /><category term="containers" /><category term="DevOps" /><category term="istio" /><category term="kubernetes" /><category term="MicroProfile" /><category term="microservices" /><category term="Red Hat OpenShift" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Security" /><author><name>Rafael Benevides</name></author><id>https://developers.redhat.com/blog/?p=495187</id><updated>2018-06-28T11:00:34Z</updated><published>2018-06-28T11:00:34Z</published><content type="html">&lt;p&gt;Have you ever wondered why you are deploying your multi-platform applications using containers? Is it just a matter of “following the hype”? In this article, I&amp;#8217;m going to ask some provocative questions to make my case for &lt;em&gt;Why Kubernetes is the new application server&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;You might have noticed that the majority of languages are interpreted and use “runtimes” to execute your source code. In theory, most Node.js, Python, and Ruby code can be easily moved from one platform (Windows, Mac, Linux) to another platform. Java applications go even further by having the compiled Java class turned into a bytecode, capable of running anywhere that has a JVM (Java Virtual Machine).&lt;/p&gt; &lt;p&gt;The Java ecosystem provides a standard format to distribute all Java classes that are part of the same application. You can package these classes as a JAR (Java Archive), WAR (Web Archive), and EAR (Enterprise Archive) that contains the front end, back end, and libraries embedded. So I ask you: Why do you use containers to distribute your Java application? Isn’t it already supposed to be easily portable between environments?&lt;/p&gt; &lt;p&gt;&lt;span id="more-495187"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Answering this question from a developer perspective isn&amp;#8217;t always obvious. But think for a moment about your development environment and some possible issues caused by the difference between it and the production environment:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Do you use Mac, Windows, or Linux? Have you ever faced an issue related to &lt;code&gt;\&lt;/code&gt; versus &lt;code&gt;/&lt;/code&gt; as the file path separator?&lt;/li&gt; &lt;li&gt;What version of JDK do you use? Do you use Java 10 in development, but production uses JRE 8? Have you faced any bugs introduced by  JVM differences?&lt;/li&gt; &lt;li&gt;What version of the application server do you use? Is the production environment using the same configuration, security patches, and library versions?&lt;/li&gt; &lt;li&gt;During production deployment, have you encountered a JDBC driver issue that you didn’t face in your development environment due to different versions of the driver or database server?&lt;/li&gt; &lt;li&gt;Have you ever asked the application server admin to create a datasource or a JMS queue and it had a typo?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All the issues above are caused by factors external to your application, and one of the greatest things about containers is that you can deploy everything (for example, a Linux distribution, the JVM, the application server, libraries, configurations and, finally, your application) inside a pre-built container. Plus, executing a single container that has everything built in is incredibly easier than moving your code to a production environment and trying to resolve the differences when it doesn&amp;#8217;t work. Since it’s easy to execute, it is also easy to scale the same container image to multiple replicas.&lt;/p&gt; &lt;h2&gt;Empowering Your Application&lt;/h2&gt; &lt;p&gt;Before containers became very popular, several &lt;a href="https://en.wikipedia.org/wiki/Non-functional_requirement#Examples"&gt;NFR (non-functional requirements)&lt;/a&gt; such as security, isolation, fault tolerance, configuration management, and others were provided by application servers. As an analogy, the application servers were planned to be to applications what CD (Compact Disc) players are to CDs.&lt;/p&gt; &lt;p&gt;As a developer, you would be responsible to follow a predefined standard and distribute the application in a specific format, while on the other hand the application server would “execute” your application and give additional capabilities that could vary from different “brands.”  Note: In the Java world, the standard for enterprise capabilities provided by an application server has recently moved under the Eclipse foundation. The work on Eclipse Enterprise for Java (&lt;a href="https://projects.eclipse.org/projects/ee4j"&gt;EE4J&lt;/a&gt;), has resulted in &lt;a href="https://jakarta.ee/"&gt;Jakarta EE&lt;/a&gt;.  (For more info, read the article &lt;a href="https://developers.redhat.com/blog/2018/04/24/jakarta-ee-is-officially-out/"&gt;&lt;em&gt;Jakarta EE is officially out&lt;/em&gt;&lt;/a&gt; or watch the &lt;a href="https://developers.redhat.com/videos/youtube/f2EwhTUmeOI/"&gt;DevNation video: &lt;em&gt;Jakarta EE: The future of Java EE&lt;/em&gt;&lt;/a&gt;.)&lt;/p&gt; &lt;p&gt;Following the same CD player analogy, with the ascension of containers, the &lt;a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/"&gt;&lt;em&gt;container image&lt;/em&gt;&lt;/a&gt; has become the new CD format. In fact, a container image is nothing more than a format for distributing your containers. (If you need to get a better handle on what container images are and how they are distributed see &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/"&gt;A Practical Introduction to Container Terminology&lt;/a&gt;&lt;/em&gt;.)&lt;/p&gt; &lt;p&gt;The real benefits of containers happen when you need to add enterprise capabilities to your application. And the best way to provide these capabilities to a containerized application is by using Kubernetes as a platform for them. Additionally, the Kubernetes platform provides a great foundation for other projects such as &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;, &lt;a href="https://istio.io/"&gt;Istio&lt;/a&gt;, and &lt;a href="https://openwhisk.apache.org/"&gt;Apache OpenWhisk&lt;/a&gt; to build on and make it easier to build and deploy robust production quality applications.&lt;/p&gt; &lt;p&gt;Let’s explore nine of these capabilities:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/05/Screenshot-2018-05-18-21.20.31.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/Screenshot-2018-05-18-21.20.31.png" alt="" width="1634" height="1254" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;1 – Service Discovery&lt;/h3&gt; &lt;p&gt;Service discovery is the process of figuring out how to connect to a service.  To get many of the benefits of containers and cloud-native applications, you need to remove configuration from your container images so you can use the same container image in all environments. Externalized configuration from applications is one of the key principles of the &lt;a href="https://developers.redhat.com/blog/2017/06/22/12-factors-to-cloud-success/"&gt;12-factor application&lt;/a&gt;. Service discovery is one of the ways to get configuration information from the runtime environment instead of it being hardcoded in the application. Kubernetes provides &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#discovering-services"&gt;service discovery&lt;/a&gt; out of the box. Kubernetes also provides &lt;a href="https://kubernetes-v1-4.github.io/docs/user-guide/configmap/"&gt;ConfigMaps&lt;/a&gt; and &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secrets&lt;/a&gt; for removing configuration from your application containers.  Secrets solve some of the challenges that arise when you need to store the credentials for connecting to a service like a database in your runtime environment.&lt;/p&gt; &lt;p&gt;With Kubernetes, there’s no need to use an external server or framework.  While you can manage the environment settings for each runtime environment through Kubernetes YAML files, Red Hat OpenShift provides a GUI and CLI that can make it easier for DevOps teams to manage.&lt;/p&gt; &lt;h3&gt;2 – Basic Invocation&lt;/h3&gt; &lt;p&gt;Applications running inside containers can be accessed through &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; access— in other words, routes from the outside world to the service you are exposing. OpenShift provides &lt;a href="https://docs.openshift.com/container-platform/3.9/architecture/networking/routes.html#overview"&gt;route objects&lt;/a&gt; using HAProxy, which has several capabilities and load-balancing strategies.  You can use the routing capabilities to do rolling deployments. This can be the basis of some very sophisticated CI/CD strategies. See &amp;#8220;6 – Build and Deployment Pipelines&amp;#8221; below.&lt;/p&gt; &lt;p&gt;What if you need to run a one-time job, such as a batch process, or simply leverage the cluster to compute a result (such as computing the digits of Pi)? Kubernetes provides &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"&gt;job objects&lt;/a&gt; for this use case. There is also a &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"&gt;cron job&lt;/a&gt; that manages time-based jobs.&lt;/p&gt; &lt;h3&gt;3 – Elasticity&lt;/h3&gt; &lt;p&gt;Elasticity is solved in Kubernetes by using &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"&gt;ReplicaSets&lt;/a&gt; (which used to be called Replication Controllers). Just like most configurations for Kubernetes, a ReplicaSet is a way to reconcile a desired state: you tell Kubernetes what state the system should be in and Kubernetes figures out how to make it so. A ReplicaSet controls the number of replicas or exact copies of the app that should be running at any time.&lt;/p&gt; &lt;p&gt;But what happens when you build a service that is even more popular than you planned for and you run out of compute? You can use the Kubernetes &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#what-is-the-horizontal-pod-autoscaler"&gt;Horizontal Pod Autoscaler&lt;/a&gt;, which scales the number of pods based on observed CPU utilization (or, with &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/custom-metrics-api.md"&gt;custom metrics&lt;/a&gt; support, on some other application-provided metrics).&lt;/p&gt; &lt;h3&gt;4 – Logging&lt;/h3&gt; &lt;p&gt;Since your Kubernetes cluster can and will run several replicas of your containerized application, it’s important that you aggregate these logs so they can be viewed in one place. Also, in order to utilize benefits like autoscaling (and other cloud-native capabilities), your containers need to be immutable. So you need to store your logs outside of your container so they will be persistent across runs. OpenShift allows you to deploy the EFK stack to aggregate logs from hosts and applications, whether they come from multiple containers or even from deleted pods.&lt;/p&gt; &lt;p&gt;The EFK stack is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.elastic.co/products/elasticsearch"&gt;Elasticsearch&lt;/a&gt; (ES), an object store where all logs are stored&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.fluentd.org/architecture"&gt;Fluentd&lt;/a&gt;, which gathers logs from nodes and feeds them to Elasticsearch&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/kibana/current/introduction.html"&gt;Kibana&lt;/a&gt;, a web UI for Elasticsearch&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;5 – Monitoring&lt;/h3&gt; &lt;p&gt;Although logging and monitoring seem to solve the same problem, they are different from each other. Monitoring is observation, checking, often alerting, as well as recording. Logging is recording only.&lt;/p&gt; &lt;p&gt;&lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is an open-source monitoring system that includes time series database. It can be used for storing and querying metrics, alerting, and using visualizations to gain insights into your systems. Prometheus is perhaps the most popular choice for monitoring Kubernetes clusters. On the &lt;a href="https://developers.redhat.com/blog/"&gt;Red Hat Developers blog&lt;/a&gt;, there are several articles covering monitoring using &lt;a href="https://developers.redhat.com/blog/tag/prometheus/"&gt;Prometheus&lt;/a&gt;. You can also find Prometheus articles on the &lt;a href="https://blog.openshift.com/tag/prometheus/"&gt;OpenShift blog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can also see Prometheus in action together with Istio at &lt;a href="https://learn.openshift.com/servicemesh/3-monitoring-tracing"&gt;https://learn.openshift.com/servicemesh/3-monitoring-tracing&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;6 – Build and Deployment Pipelines&lt;/h3&gt; &lt;p&gt;CI/CD (Continuous Integration/Continuous Delivery) pipelines are not a strict “must have” requirement for your applications. However, CI/CD are often cited as pillars of successful software development and &lt;a href="https://devops.com/optimizing-effective-cicd-pipeline/"&gt;DevOps&lt;/a&gt; practices.  No software should be deployed into production without a CI/CD pipeline. The book &lt;a href="https://www.amazon.com/dp/0321601912?tag=contindelive-20"&gt;&lt;em&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/em&gt;&lt;/a&gt;, by Jez Humble and David Farley, says this about CD: “Continuous Delivery is the ability to get changes of all types—including new features, configuration changes, bug fixes and experiments—into production, or into the hands of users, safely and quickly in a sustainable way.”&lt;/p&gt; &lt;p&gt;OpenShift provides CI/CD pipelines out of the box as a &amp;#8220;&lt;a href="https://docs.openshift.com/container-platform/3.7/dev_guide/builds/build_strategies.html#pipeline-strategy-options"&gt;build strategy&lt;/a&gt;.&amp;#8221; Check out &lt;a href="https://www.youtube.com/watch?v=N8R3-eNVoEc"&gt;this video&lt;/a&gt; that I recorded two years ago, which has an example of a Jenkins CI/CD pipeline that deploys a new microservice.&lt;/p&gt; &lt;h3&gt;7 – Resilience&lt;/h3&gt; &lt;p&gt;While Kubernetes provides resilience options for the &lt;a href="https://docs.openshift.com/container-platform/3.9/admin_guide/high_availability.html"&gt;cluster itself&lt;/a&gt;, it can also help the application be resilient by providing &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;PersistentVolumes&lt;/a&gt; that support replicated volumes. Kubernetes&amp;#8217; &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/"&gt;ReplicationControllers&lt;/a&gt;/deployments ensure that the specified numbers of pod replicas are consistently deployed across the cluster, which automatically handles any possible &lt;a href="https://kubernetes.io/docs/concepts/architecture/nodes/#what-is-a-node"&gt;node&lt;/a&gt; failure.&lt;/p&gt; &lt;p&gt;Together with resilience, fault tolerance serves as an effective means to address users&amp;#8217; reliability and availability concerns. Fault tolerance can also be provided to an application that is running on Kubernetes through &lt;a href="https://istio.io/"&gt;Istio&lt;/a&gt; by its retries rules, circuit breaker, and pool ejection. Do you want to see it for yourself? Try the Istio Circuit Breaker tutorial at &lt;a href="https://learn.openshift.com/servicemesh/7-circuit-breaker"&gt;https://learn.openshift.com/servicemesh/7-circuit-breaker&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;8 – Authentication&lt;/h3&gt; &lt;p&gt;Authentication in Kubernetes can also be provided by Istio through its &lt;a href="https://istio.io/docs/concepts/security/mutual-tls.html"&gt;mutual TLS authentication&lt;/a&gt;, which aims to enhance the security of microservices and their communication without requiring service code changes. It is responsible for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Providing each service with a strong identity that represents its role to enable interoperability across clusters and clouds&lt;/li&gt; &lt;li&gt;Securing service-to-service communication and end user-to-service communication&lt;/li&gt; &lt;li&gt;Providing a key management system to automate key and certificate generation, distribution, rotation, and revocation&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Additionally, it is worth mentioning that you can also run &lt;a href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; inside a Kubernetes/OpenShift cluster to provide both authentication and authorization. Keycloak is the upstream product for Red Hat Single Sign-on. For more information, read &lt;a href="https://developers.redhat.com/blog/tag/keycloak/"&gt;Single-Sign On Made Easy with Keycloak&lt;/a&gt;. If you are using Spring Boot, watch the DevNation video: &lt;a href="https://developers.redhat.com/videos/youtube/Bdg_DjuoX0A/"&gt;Secure Spring Boot Microservices with Keycloak&lt;/a&gt; or &lt;a href="https://developers.redhat.com/blog/tag/keycloak/"&gt;read the blog article&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;9 – Tracing&lt;/h3&gt; &lt;p&gt;Istio-enabled applications can be configured to collect trace spans using &lt;a href="https://zipkin.io/"&gt;Zipkin&lt;/a&gt; or &lt;a href="https://www.jaegertracing.io/docs/"&gt;Jaeger&lt;/a&gt;. Regardless of what language, framework, or platform you use to build your application, Istio can enable distributed tracing. Check it out at &lt;a href="https://learn.openshift.com/servicemesh/3-monitoring-tracing"&gt;https://learn.openshift.com/servicemesh/3-monitoring-tracing&lt;/a&gt;.  See also &lt;a href="https://developers.redhat.com/blog/2018/05/08/getting-started-with-istio-and-jaeger-on-your-laptop/"&gt;Getting Started with Istio and Jaeger on your laptop&lt;/a&gt; and the recent DevNation video: &lt;a href="https://developers.redhat.com/blog/2018/06/20/next-devnation-live-advanced-microservices-tracing-with-jaeger-june-21st-12pm-edt/"&gt;Advanced microservices tracing with Jaeger&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Are Application Servers Dead?&lt;/h2&gt; &lt;p&gt;Going through these capabilities, you can realize how Kubernetes + OpenShift + Istio can really empower your application and provide features that used to be the responsibility of an application server or a software framework such as &lt;a href="https://netflix.github.io/"&gt;Netflix OSS&lt;/a&gt;. Does that mean application servers are dead?&lt;/p&gt; &lt;p&gt;In this new containerized world, application servers are mutating into becoming more like frameworks. It&amp;#8217;s natural that the evolution of software development caused the evolution of application servers. A great example of this evolution is the &lt;a href="http://microprofile.io/"&gt;Eclipse MicroProfile&lt;/a&gt; specification having &lt;a href="http://wildfly-swarm.io"&gt;WildFly Swarm&lt;/a&gt; as the application server, which provides to the developer features such as fault tolerance, configuration, tracing, REST (client and server), and so on. However, WildFly Swarm and the MicroProfile specification are designed to be very lightweight. WildFly Swarm doesn&amp;#8217;t have the vast array of components required by a full Java enterprise application server. Instead, it focuses on microservices and having just enough of the application server to build and run your application as a simple executable .jar file.  You can read more about &lt;a href="https://developers.redhat.com/blog/tag/microprofile/"&gt;MicroProfile&lt;/a&gt; on this blog.&lt;/p&gt; &lt;p&gt;Furthermore, Java applications can have features such as the Servlet engine, a datasource pool, dependency injection, transactions, messaging, and so forth. Of course, frameworks can provide these features, but an application server must also have everything you need to build, run, deploy, and manage enterprise applications in any environment, regardless of whether they are inside containers. In fact, application servers can be executed anywhere, for instance, on bare metal, on virtualization platforms such as &lt;a href="https://www.redhat.com/en/technologies/virtualization/enterprise-virtualization"&gt;Red Hat Virtualization&lt;/a&gt;, on private cloud environments such as &lt;a href="https://www.openstack.org/"&gt;Red Hat OpenStack Platform&lt;/a&gt;, and also on public cloud environments such as &lt;a href="https://azure.microsoft.com/en-us/"&gt;Microsoft Azure&lt;/a&gt; or &lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A good application server ensures consistency between the APIs that are provided and their implementations. Developers can be sure that deploying their business logic, which requires certain capabilities, will work because the application server developers (and the defined standards) have ensured that these components work together and have evolved together. Furthermore, a good application server is also responsible for maximizing throughput and scalability, because it will handle all the requests from the users; having reduced latency and improved load times, because it will help your application&amp;#8217;s &lt;a href="https://12factor.net/disposability"&gt;disposability&lt;/a&gt;; be lightweight with a small footprint that minimizes hardware resources and costs; and finally, be secure enough to avoid any security breach. For Java developers, Red Hat provides &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;, which fulfills all the requirements of a modern, modular application server.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Container images have become the standard packaging format to distribute cloud-native applications. While containers “per se” don’t provide real business advantages to applications, Kubernetes and its related projects, such as OpenShift and Istio, provide the non-functional requirements that used to be part of an application server.&lt;/p&gt; &lt;p&gt;Most of these non-functional requirements that developers used to get from an application server or from a library such as &lt;a href="https://netflix.github.io/"&gt;Netflix OSS&lt;/a&gt; were bound to a specific language, for example, Java. On the other hand, when developers choose to meet these requirements using Kubernetes + OpenShift + Istio, they are not attached to any specific language, which can encourage the use of the best technology/language for each use case.&lt;/p&gt; &lt;p&gt;Finally, application servers still have their place in software development. However, they are mutating into becoming more like language-specific frameworks that are a great shortcut when developing applications, since they contain lots of already written and tested functionality.&lt;/p&gt; &lt;p&gt;One of the best things about moving to containers, Kubernetes, and microservices is that you don&amp;#8217;t have to choose a single application server, framework, architectural style or even language for your application. You can easily deploy a container with JBoss EAP running your existing Java EE application, alongside other containers that have new microservices using Wildfly Swarm, or Eclipse Vert.x for reactive programming. These containers can all be managed through Kubernetes. To see this concept in action, take a look at &lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;. Use the &lt;a href="https://developers.redhat.com/launch/"&gt;Launch service&lt;/a&gt; to build and deploy a sample app online using WildFly Swarm, Vert.x, Spring Boot, or Node.js. Select the Externalized Configuration mission to learn how to use Kubernetes ConfigMaps. This will get you started on your path to cloud-native applications.&lt;/p&gt; &lt;p&gt;You can say that &lt;a href="https://www.linkedin.com/pulse/openshift-new-enterprise-linux-daniel-riek/"&gt;Kubernetes/OpenShift is the new Linux&lt;/a&gt; or even that &amp;#8220;Kubernetes is the new application server.&amp;#8221; But the fact is that an application server/runtime + OpenShift/Kubernetes + Istio has become the &amp;#8220;de facto&amp;#8221; cloud-native application platform!&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;If you haven&amp;#8217;t been to the Red Hat Developer site lately, you should check out the pages on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes and container management&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/microservices/"&gt;Microservices&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Service mesh and Istio&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a name="rbenevides"&gt;&lt;/a&gt;&lt;/p&gt; &lt;div class="author"&gt; &lt;p&gt;&lt;img class="author-photo alignleft" title="Rafael" src="http://rafabene.com/images/rafaelbenevides.jpg" alt="Rafael Benevides" width="119" height="119" /&gt;&lt;/p&gt; &lt;h3&gt;About the author:&lt;/h3&gt; &lt;p&gt;Rafael Benevides is Director of Developer Experience at &lt;a href="http://www.redhat.com"&gt;Red Hat&lt;/a&gt;. With many years of experience in several fields of the IT industry, he helps developers and companies all over the world to be more effective in software development. Rafael considers himself a problem solver who has a big love for sharing. He is a member of Apache DeltaSpike PMC—a Duke’s Choice Award winner project—and a speaker in conferences such as JavaOne, Devoxx, TDC, DevNexus, and many others.| &lt;a href="https://www.linkedin.com/in/rafaelbenevides" target="_blank" rel="noopener"&gt;LinkedIn&lt;/a&gt; | &lt;a href="http://rafabene.com/" target="_blank" rel="noopener"&gt;rafabene.com&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;linkname=Why%20Kubernetes%20is%20The%20New%20Application%20Server" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F06%2F28%2Fwhy-kubernetes-is-the-new-application-server%2F&amp;#38;title=Why%20Kubernetes%20is%20The%20New%20Application%20Server" data-a2a-url="https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/" data-a2a-title="Why Kubernetes is The New Application Server"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/"&gt;Why Kubernetes is The New Application Server&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NYgl-DiBQfI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Have you ever wondered why you are deploying your multi-platform applications using containers? Is it just a matter of “following the hype”? In this article, I&amp;#8217;m going to ask some provocative questions to make my case for Why Kubernetes is the new application server. You might have noticed that the majority of languages are interpreted [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/"&gt;Why Kubernetes is The New Application Server&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">495187</post-id><dc:creator>Rafael Benevides</dc:creator><dc:date>2018-06-28T11:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/</feedburner:origLink></entry></feed>
